version: 0.2

env:
  variables:
    MODULE_NAME: api
phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - pip install git-remote-codecommit
  pre_build:
    commands:
      - echo git clone 
      - echo "[profile codecommit-account]" > .awscli-config
      - echo "role_arn = ${ASSUME_ROLE_ARN}" >> .awscli-config
      - echo "credential_source = EcsContainer" >> .awscli-config
      - export AWS_CONFIG_FILE=${CODEBUILD_SRC_DIR}/.awscli-config
      - cd ..
      - cp -R ${CODEBUILD_SRC_DIR} ./${MODULE_NAME}
      - git clone -b ${BRANCH} https://github.com/${GIT_USERNAME}/${GIT_REPOSITORYNAME}
      - PROJECT_NAME=$(basename ${GIT_REPOSITORYNAME} .git)
      - ls ./ -al
      - chmod +x ./${PROJECT_NAME}/master/gradlew
  build:
    commands:
      - echo Build started on `date`
      - cd ./${PROJECT_NAME}/master
      - ./gradlew :${MODULE_NAME}:shadowJar
      - cd ../${MODULE_NAME}
      - BASE_DIRECTORY=$(pwd)
  post_build:
    commands:
      - echo Build completed on `date`
      - aws lambda update-function-code --function-name ${LAMBDA_FUNCTION_NAME} --zip-file fileb://build/libs/${MODULE_NAME}-sample.jar
# ビルドプロセスの後に保存する成果物の取り扱いを定義
# ビルドが成功した後にCodeBuildによってS3などの指定された場所に保存されます

artifacts:
  base-directory: ${BASE_DIRECTORY} 
  discard-paths: yes # ファイル構造を無視する
  files:
    - build/libs/${MODULE_NAME}-sample.jar
# CodeBuildのビルド間で再利用するキャッシュの設定
# キャッシュを使用することで、再ビルド時に依存関係を再ダウンロードせずに済み、ビルド時間が短縮される
cache:
  paths:
    # 依存関係やビルド結果をキャッシュするために利用される
    # ビルド中にダウンロードされた依存ライブラリやビルドされたファイルが保存される
    - '/root/.gradle/caches/**/*'